## 第一章 0 的故事

### 10 进制计数法

#### 分解 2503

+ 2 表示 "1000 的个数"
+ 5 表示 "100 的个数"
+ 0 表示 "10 的个数"
+ 3 表示 "1 的个数"      

![分解2503](1-1.png)

千位、百位、十位、个位，分别可称为 10<sup>3</sup> 的位，10<sup>2</sup> 的位，
10<sup>1</sup> 的位，10<sup>0</sup> 的位。10进制计数法的数位全都是 10<sup>n</sup> 的形式。
这个 10 称为 10进制计数法的 **基数**或 **底**。     

### 2 进制计数法

计算机在处理数据时使用的是 2进制计数法。从 10 进制计数法类推，便可很快掌握它的规则：   

+ 使用的数字只要0、1，共 2 种
+ 从右往右分别表示 1 位、2位、4位、8位。    

#### 基数转换

接下来将 10 进制的12 转换为 2 进制。这需要将 12 反复地除以 2(12除以2，商为6;6除以2，商为3；
3再除以2.....)，并观察余数为 1 还是 0。余数为0则表示除完了。随后再将每步所得的余数的列逆向排列。     

## 逻辑

### 乘车费用问题——兼顾完整性和排他性

#### 命题及其真假

能够判断对错的的陈述句叫做 **命题**。例如，下面语句都能判断对错，因此都是命题：    

+ Alice(13) 的年龄在 6 岁以上
+ Bob(4) 的年龄在 6 岁以上
+ Charlie(6) 的年龄在 6 岁以上   

命题正确时，称该命题为"真"。反之，命题不正确时，称该命题为"假"。也将"真"称作 **true**，"假"称为
**false**。命题要么为 true 要么为 false。同时满足 true 和 false 的不能称为命题。既不为
true 也不为 false 的也不能称为命题。     

#### 兼顾完整性和排他性

在考虑规则时，确认有没有"遗漏"和"重复"是相当重要的。     

没有"遗漏"，即具备 **完整性**，由此明确该规则无论在什么情况下都能适用。      

没有"重复"，即具备 **排他性**，由此明确该规则不存在矛盾之处。     

### 建立复杂命题

#### 蕴含——若 A 则 B

与 "或" 和 "与" 不同，"蕴含" 基本上不用做运算。但是，由 A 和 B 两个命题构成的 "若 A 则 B"，
是可以判定真假的命题。（这句话怎么理解，感觉是病句啊）例如，假设 A 命题为 "乘客的年龄为10岁以上"，
B 命题为 "乘客的年龄为6岁以上"，那么 "若 A 则 B" 的命题便为真。     

命题，若 A 则 B 称为 **蕴含**，逻辑表达式写作：   

`A => B`    

真值表：    


 A | B | A => B
---------|----------|---------
 true | true | true
 true | false | false
 false | true | true
 false | false | true

### 德摩根定律

`(^A)`  he